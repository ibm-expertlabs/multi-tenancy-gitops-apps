apiVersion: appconnect.ibm.com/v1beta1
kind: Configuration
metadata:
  name: server.conf.yaml
spec:
  type: serverconf
  contents: ---
# ACE Integration Server configuration file when owned by an Integration Node
#
# Created at 12.0.6.0 - 36c310ef15fa4cc8a3996c17843afbf0-725362bb6c4df32013b83b36a127f242
#
# General notes :
#  - Integration Server will load server.conf.yaml from directory named after the Integration Server
#    in the servers directory under the node configuration in the workpath:
#    <workpath> eg: /var/mqsi/
#     /components
#      /<node-name>
#       /servers
#        /<server-name>
#         server.conf.yaml
#  _ Integration Server wil load its server.conf.yaml after having loaded the node wide node.conf.yaml
#    and its override/node.conf.yaml to ensure a base set of node wide properties are configured.
#  - To ensure valid YAML avoid any use of TAB characters
#  - File paths may be taken as absolute, or relative to the integration server's work directory
#
# WARNING: Any value specified in the 'overrides/server.conf.yaml' will override values here
#
serverConfVersion: 1

#trace: 'none'               # choose 1 of : none|debug|debugTree|diagnostic|diagnosticTree
#traceSize: '1G'             # Set the service trace size

#traceNodeLevel: true        # Enable or disable message flow 'Trace nodes'

#userTrace: 'none'           # choose 1 of : none|debug|debugTree
#userTraceSize: '1G'         # Set the service trace size

#forceServerHTTPFaultDetail: 'specific' # Set the detail level for the default Error Handling fault messages returned by all HTTP/SOAPInput nodes. Default is 'specific'.
                                       # Set to 'specific' for full error & exception details to be included in the response. Set to 'generic' for error and exception details to be hidden and a generic error response to be sent.
#httpServerName: ''                    # Set the value to be returned in the 'Server' HTTP response header. Cf. the ResourceManagers / HTTP[S]Connector / ServerName
                                       # pair of settings, which take precedence over this one.
#iwaGSSHostnameOverride: ''            # Set the local hostname to be used in GSS-controlled Kerberos authentication from a SOAP or HTTP input node. Can also be set
                                       # via the MQSI_GSS_HOSTNAME_OVERRIDE environment variable, which takes precedence over this setting.

Log:
  #elkLog: false             # Control the publication of BIP messages to an ELK (Elasticsearch, Logstash, Kibana) stack. Set to true or false, default is false.
  #elkConnections: ''        # Name of the ELK connection to use, for example 'elkConnection1', must be defined in the ELKConnections section below.

Defaults:
  #defaultApplication: ''             # Name a default application under which independent resources will be placed
                                      # Defaults to the <name of the integration server>_DefaultApplication for integration servers owned by integration nodes
  policyProject: 'CommonPolicyProject'   # Name of the Policy project that will be used for unqualified Policy references, default is 'DefaultPolicies'
  Policies:
    # Set default policy names, optionally qualified with a policy project as {policy project}:name
    #monitoringProfile: ''       # Default Monitoring profile
  Credentials:
    # Names a default credential name to be used when a more specific credential is not available for the credential type.
    #httpproxy: ''
    #jdbc: ''
    #kafka: ''
    #kerberos: ''
    #ldap: ''
    #odbc: ''
    #mq: ''
    #wsrr: ''

Monitoring:
  MessageFlow:
    #publicationOn: 'inactive'         # choose 1 of : active|inactive, default inactive
                                       # Ensure Events.BusinessEvents.MQ|MQTT|ELK|File is also configured in the integration node
    #eventFormat: 'MonitoringEventV2'  # When BusinessEvents.-.outputFormat is xml set MonitoringEventV2 or WMB, default MonitoringEventV2

Statistics:
  # All applications and message flows will inherit the Snapshot and Archive values set here, unless they have been set
  # to a specific value other than inherit via the WebUI, mqsichangeflowstats command, Toolkit or apiv2 REST
  # Notes
  #  - values here can be overridden by 'overrides/server.conf.yaml'
  #  - to publish on MQ or MQTT, also configure Events.OperationalEvents, and set outputFormat  to include json and/or xml
  #  - to display in the WebUI Snapshot.outputFormat must include json; nodeDataLevel needs to be set to basic or advanced
  Snapshot:
    publicationOn: 'active'      # choose 1 of : active|inactive, explictly set 'active'. If unset will default to 'inactive'
    #accountingOrigin: 'none'    # choose 1 of : none|basic, default none
    nodeDataLevel: 'basic'       # choose 1 of : none|basic|advanced, explictly set 'basic'. If unset will default to 'none'
    outputFormat: 'json'         # choose comma separated list of one or more of : csv,json,xml,usertrace. Explictly set to 'json' for WebUI. If unset will default to ''
    #threadDataLevel: 'none'     # choose 1 of : none|basic. If unset will default to 'none'
  Archive:
    #archivalOn: 'inactive'      # choose 1 of : active|inactive, default inactive
                                 # Also set Events.OperationalEvents.MQ|MQTT for outputFormat xml to be published to MQ/MQTT
    #accountingOrigin: 'none'    # choose 1 of : none|basic
    #majorInterval: 60           # Sets the interval in minutes at which archive statistics are published
    #nodeDataLevel: 'none'       # choose 1 of : none|basic|advanced
    #outputFormat: 'usertrace'   # comma separated list of : csv,xml,usertrace
    #threadDataLevel: 'none'     # choose 1 of : none|basic
  #csv:                           # The csv section is used when either Snapshot or Archive Statistics have an output format of csv.
    #filePath: ''                 # The file path where the statistics records will be written to when there is an outputFormat of csv.
                                  # If this is set to '' then the default path is <MQSI_WORKPATH>/common/stats.
    #numberOfFiles: 4             # The maximum number of files that message flow statistics file writing can rotate through.
    #sizeOfFile: 25               # The maximum size in MB of a single file that a statistics file can use before rotating to the next file.
    #averages: true               # When set to true the average values for each statistic are included in the written output.
  Resource:
    reportingOn: true            # choose 1 of : true|false, Set to 'true'. If unset will default to 'false'
    #outputFormat: 'csvFile'     # choose 'csvFile', or 'file' for IIB v10 compatibility. if unset will default to ''
    #filePath: ''                # The file path where the statistics records will be written to when csvFile or file outputFormat is used.
                                 # If this is set to '' then the default path is <MQSI_WORKPATH>/common/resourceStats.
    #numberOfFiles: 4            # The maximum number of files that resource statistics file writing can rotate through.
    #sizeOfFile: 25              # The maximum size in MB of a single file that a statistics file can use before rotating to the next file.
    #averages: true              # When set to true the average values for each statistic are included in the written output.

UserExits:
  #activeUserExitList: ''        # specify the name of an installed user exit to activate
  #userExitPath: ''              # Specify the path or paths containing the user exits to be loaded. Multiple paths should be separated by colons on Unix and semi-colons on Windows.

ResourceManagers:
  ExecutionGroup:
    #httpNodesUseEmbeddedListener: false   # Configures whether the HTTP nodes uses the node wide or embedded listener
    #soapNodesUseEmbeddedListener: true    # Configures whether the SOAP nodes uses the node wide or embedded listener

  JVM:
    #jvmVerboseOption: 'none'
    #jvmDisableClassGC: ''
    #jvmEnableIncGC: ''
    #jvmShareClasses: ''
    #jvmNativeStackSize: -1
    #jvmJavaOSStackSize: -1
    #jvmMinHeapSize: 33554432        # a change at the root level setting above will take precedence (32MB)
    #jvmMaxHeapSize: 268435456       # a change at the root level setting above will take precedence (256MB)
    #jvmDebugPort: 0                 # a change at the root level setting above will take precedence
    #jvmSystemProperty: ''
    #keystoreType: ''
    #keystoreFile: ''
    #keystorePass: ''
    #truststoreType: ''
    #truststoreFile: ''
    #truststorePass: ''
    #crlFileList: ''
    #enableCRLDP: ''
    #kerberosConfigFile: ''
    #kerberosKeytabFile: ''

  HTTPConnector:
    #ListenerPort: 0              # Set non-zero to set a specific port, defaults to 7800
    #ListenerAddress: '0.0.0.0'   # Set the IP address for the listener to listen on. Default is to listen on all addresses
    #AutoRespondToHTTPHEADRequests: false # Automatically respond to HTTP HEAD requests without invoking the message flow. Set to true or false, default is false.
    #ServerName: ''               # Set the value to be returned in the 'Server' HTTP header.
    #CORSEnabled: false           # Set the value to true to make the listener respond to valid HTTP CORS requests
    #CORSAllowOrigins: '*'
    #CORSAllowCredentials: false
    #CORSExposeHeaders: 'Content-Type'
    #CORSMaxAge: -1
    #CORSAllowMethods: 'GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS'
    #CORSAllowHeaders: 'Accept,Accept-Language,Content-Language,Content-Type,Authorization'

  HTTPSConnector:
    #ListenerPort: 0                 # Set non-zero to set a specific port, defaults to 7843
    #ListenerAddress: '0.0.0.0'      # Set the IP address for the listener to listen on. Default is to listen on all addresses
    #ReqClientAuth: true             # Controls whether to request for client certificate during tls handshake. 
    #RejectUnauthorizedClient: true  # Controls whether to allow connection without client certificate when ReqClientAuth is set.
    #KeyAlias: ''
    #KeyPassword: 'P4s5w0rd'         # Set the password or alias to the password of the key
    #KeystoreFile: '/path/to/keystore.jks'
    #KeystorePassword: 'P4s5w0rd'    # Set the password or alias to the password of the keystore
    #KeystoreType: 'JKS'             # Set the keystore type, can be 'JKS' or 'P12'. Default is JKS.
    #TruststoreFile: /path/tp/truststore.jks
    #TruststorePassword: 'P4s5w0rd'  # Set the password or alias to the password of the keystore
    #TruststoreType: 'JKS'           # Set the truststore type, can be 'JKS' or 'PEM'. Default is JKS.
    #CipherSpec: ''                  # Comma-separated list of allowable ciphers. IANA cipher names are accepted.
                                     # Example: 'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384'.
    #AutoRespondToHTTPHEADRequests: false # Automatically respond to HTTP HEAD requests without invoking the message flow. Set to true or false, default is false.
    #ServerName: ''                  # Set the value to be returned in the 'Server' HTTP header.
    #CORSEnabled: false              # Set the value to true to make the listener respond to valid HTTP CORS requests
    #CORSAllowOrigins: '*'
    #CORSAllowCredentials: false
    #CORSExposeHeaders: 'Content-Type'
    #CORSMaxAge: -1
    #CORSAllowMethods: 'GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS'
    #CORSAllowHeaders: 'Accept,Accept-Language,Content-Language,Content-Type,Authorization'
    #EnableTLSTrace: false           # Enables tracing of TLS handshake messages to the console
    #AllowRenegotiation: true        # Controls whether renegotiation of connections is allowed when using TLSv1.2 and earlier.

  ActivityLogManager:
    #activityLogEnabled: true
    #defaultLogSizePerThread: 1000
    #minSeverityLevel: 'INFO' # choose one of INFO|WARN|ERROR

  RecordedMessageManager:
    #recordedMessagePath: ''         # Set the directory to store recorded messages
    #recordAllMessages: false        # Set to 'true' to enabling recording of messages from all message flows

  DatabaseConnectionManager:
    #maxConnectionAge: 60                       # Set to -1 to never release connections
    #useDefaultSchemaForStoredProcedures: true

  SocketConnectionManager:
    #allowedAuthTypes: 'platform default'   # Sets the allowable authentication mechanisms when responding to a HTTP 401 response during a HTTP based request.
                                            # Multiple values can be specified and should be semi-colon separated.
                                            # Valid values are 'basic', 'ntlm', 'negotiate', 'nego2', 'all', 'iwa', 'platform default'.
                                            # Unix only supports 'basic'. Windows supports all values.
                                            # 'platform default' is expanded to "basic" on unix and "basic; ntlm; negotiate; nego2" on windows.
                                            # 'iwa' is expanded to "ntlm; negotiate; nego2"
    #allowNtlmNegotiation: true   # Set to 'false' to prevent NTLM from being negotiated with the SPNEGO and SPNEGO-2 protocols.
    #negotiateMutualAuth: false   # Set to 'true' if you require mutual authentication when the Kerberos protocol is negotiated.
    #preemptiveAuthType: ''  # Configure the authentication mechanism to use preemptively when making a HTTP based request.
                             # Valid values are '', 'basic', 'ntlm', 'negotiate', 'nego2'.
                             # Set to the default value of '' to disable preemptive authentication.
    #tcpNoDelay: true     #Set the tcpnodelay setting for non-SSL sockets created for HTTP based requests.
                          # Valid values are 'default' 'platform default' 'true' 'false' 'active' 'inactive'
                          # To disable tcpNoDelay use 'false' or 'inactive'
                          # To enable tcpNoDelay use 'true' or 'active'
                          # To use the default setting for the current platform use 'default' or 'platform default'
    #tcpNoDelaySSL: true  #Set the tcpnodelay setting for SSL sockets created for HTTP based requests.
                          # Valid values are 'default' 'platform default' 'true' 'false' 'active' 'inactive'
                          # To disable tcpNoDelay use 'false' or 'inactive'
                          # To enable tcpNoDelay use 'true' or 'active'
                          # To use the default setting for the current platform use 'default' or 'platform default'
    #defaultLocalAddressForBind: ''  # Set the default local address that will be used when binding newly created sockets.

  ContentBasedFiltering:
    #cbfEnabled: false     # Set to true to enable content-based filtering
    #evaluationThreads: 1  # Configures the number of evaluation threads available for content-based filtering
    #validationThreads: 1  # Configured the number of validation threads available for content-based filtering

  FTEAgent:
    #coordinationQMgr: '' # Set to the name of the coordination Queue Manager to be used by the embedded FTE Agent if not using the default Queue Manager as the coordination Queue Manager.

  ParserManager:
    #parserWarningThreshold: 1000   # Sets the frequency, based on parsers per thread, with which a parser creation warning message is written to activity log
    #fieldWarningThreshold: 100000  # Sets the frequency, based on fields per parser, with which a field creation warning message is written to activity log
    #freeMasterParsers: false       # Sets whether parsers will be freed after each input message has been processed.

  ESQL:
    #castWithAccurateZoneOffsets: false       # Set ESQL to use the time zones that are stored with Time, Timestamp, and Date data types when you cast to and from GMTTime and GMTTimestamp data types.
    #alwaysCastToLocal: true                  # Set ESQL to convert the specified time into the local time zone of the integration node/server when a String is cast to a Time or TimeStamp with a Format.
    #useICUStringManipulation: false          # Set ESQL to provide full support for UTF-16 surrogate pairs.
    #allowPropagateWithSharedLockHeld: false  # Set ESQL to propagate the message even if a lock is held on a shared variable.
    #performanceStatsReportingOn: false       # Set ESQL to capture performance statistics
    #performanceStatsOutputPath: ''           # Sets the path that ESQL performance statistics are captured to

  XMLNSC:
    #invalidCharacterEscapeType: none  # Sets the way XMLNSC serialization renders characters that do not exist in the target code page. Choose one of none|hex|decimal|unicode
                                       # The value of none will throw an exception for an invalid character.
                                       # Choosing hex|decimal|unicode will write the character either in hex, decimal or unicode character entity format.
    #storeTimeZoneInValue: true        # Sets XMLNSC parsers to store timezone information as part of the Datetime value that is parsed.
    #writeTimeZone: whenSet            # Sets XMLNSC parsers to write timezone information when an XML document is serialized. Choose one of never|whenSet|nonUTC|nonLocal|always
                                       # When the value of never is set timezones will not be written in the XML document.
                                       # When the value of always is set timezones will always be written where the local timezone will be used if required.
                                       # whenSet can be used to only write timezones if they were parsed from an XMLNSC message
                                       # The values of nonUTC and nonLocal can be used to avoid writing timezones for local or UTC timezones.
    #cdataFieldMerging: false          # Sets XMLNSC parsers to represent CDATA sections in one message tree field.

  JSON:
    #escapeMode: strict  # Specifies whether the JSON parser escapes forward slash characters when it is serializing a message tree. Choose one of preserveForwardSlashes|strict. Default is strict if unset.
                         # To specify that the JSON parser must leave forward slashes unchanged in the output, set the value to preserveForwardSlashes.
    #allowScientificNotation: true  # Specifies whether the JSON parser serializes numerical values using scientific notation (for example 1.10E+1). Default is true if unset.
                                    # To specify that the JSON parser should use scientific notation set the value to true
                                    # To specify that the JSON parser should use decimal notation set the value to false
    #disableSchemaLookupExceptionWhen: '' # Comma-separated list of events that will not throw exceptions when validation is requested of the JSON parser and a JSON schema cannot be loaded.
                                          # When an event in the list occurs, no exception will be thrown and instead the JSON parser will continue to parse but without validation.
                                          # Valid events are 'notSpecified', 'notFound'. If unset will default to '' which means that no exceptions are disabled.
                                          #  'notSpecified' disables the BIP5736 exception that is thrown if a JSON schema name is not supplied.
                                          #  'notFound' disables the range of exceptions (BIP1318, BIP1312, BIP5737, BIP5738, BIP5739) that are thrown if a JSON schema name is supplied, but cannot be resolved.
                                          # This option is available to allow behaviour from previous releases to be maintained.

  MQConnectionManager:
    #enableBrowseForAllInputQueues: false  # Sets the MQOO_BROWSE open option when all input queues are opened.
    #expiryCompensation: false             # Set to true to reduce the MQOutput MQPUT MQMD.Expiry by the amount of message flow processing time.
    #useIsolatedBindings: false            # Sets the MQCNO_ISOLATED_BINDING connection option when the MQ connection is created.
    #queueCacheMaxSize: 10                 # Sets the maximum number of a queue handles that a message flow thread can maintain.
    #queueCacheTimeout: 300                # Sets the time (in seconds) that a freed queue handle will stay cached until it removed from the cache.
    #queueMaxTimeout: 60                   # Sets the maximum time (in seconds) that an MQ handle is idle before it is considered for closing.

  XPathCache:
    #minimumSize: 6000            # controls the minimum number of compiled XPath expressions that can be stored in the XPath cache.
    #maximumSize: 10000           # controls the maximum number of compiled XPath expressions that can be stored in the XPath cache
    #entryWarningThreshold: 1000  # controls how frequently activity log messages are emitted by the XPath cache as it grows in size.
    #mode: true                   # Set to false to disable XPath caching

  AsyncHandleManager:
    #asyncHandleTimeoutSeconds: -1  # Sets the expiry time (in seconds) when the reply identifiers expire for asynchronous handles used for HTTP, SOAP, SAP and Callable flow nodes.

  GlobalCache:
    cacheOn: true                     # Set to true to enable Global Cache functionality
                                        # When using Global Cache it is advisable to change your jvmMinHeapSize and jvmMaxHeapSize depending on
                                        # the number of live objects in the heap, complexity of live objects in the heap and number of available cores.
                                        # see https://www.ibm.com/support/knowledgecenter/SSTVLU_8.6.0/com.ibm.websphere.extremescale.doc/cxsjvmtune.html
    cacheServerName: 'IND01GCContainer1'                # The name of this cache server component (a cache server component can be a catalog and/or a container); it must be unique in your global cache system
    catalogServiceEndPoints: 'localhost:3000'        # Comma-separated list of hostnames and ports for the catalog servers to use, e.g. 'localhost:2800'
    catalogDomainName: 'ACE12_IND01GC_localhost_3000'              # Name of the shared global cache domain; this value should be shared by all catalog servers in the same domain, e.g. 'WMB_MyCacheDomain'
    catalogClusterEndPoints: 'IND01GCCatalogServer:localhost:3003:3001'        # Comma-separated list of catalog server connection details in the format 'cacheServerName:catalogCacheServerHost:HAPort:clientPort'
                                        # If this is a catalog server, cacheServerName should match the value above, and if not, it will be the value used on the integration server hosting it
                                        # The list should be in the same order for all catalog and container servers which are interacting together in the same domain
    #clientsDefaultToSSL: ''            # Set to true to enable SSL for any client connections to the cache servers
    #deploymentPolicyCustomFile: ''     # Override the deployment policy file (default is '<install directory>/server/cachesupport/config/deployment.xml')
    #enableCatalogService: false        # Set to true to launch a catalog service cache server component in this integration server
    enableContainerService: true      # Set to true to launch a container service cache server component in this integration server
    enableJMX: true                    # Allow admin access to this container service via JMX
    listenerHost: 'localhost'                   # Comma-separated list of hostnames for this cacheServer component, e.g. 'localhost,myserver.mycompany.com'
    listenerPort: 3004                   # Port number this cache server listens on; it must be unique on this machine
                                        # Four consecutive ports are assigned, e.g. 2800 for catalogCacheServerListenerPort, 2801 for clientPort, 2802 for JMXServicePort, 2803 for HAPort
    #objectGridCustomFile: ''           # Override the ObjectGrid file (default is '<install directory>/server/cachesupport/config/objectgrid_xio.xml')
    #overrideTraceSpec: ''              # Set a trace level for the cache server components, e.g. ObjectGrid*=event=enabled
    #sslAlias: ''                       # SSL Alias to use for the cache server components
    #sslProtocol: ''                    # SSL Protocol to use for SSL connections eg. default is "TLSv1.2"
    #defaultCacheType: 'global'         # Should default maps created use the Global Cache functionality or a Local Cache, defaults to global

  ExceptionLog:
    #enabled: false                     # Enables logging of exceptions
    #exceptionLog: '[iib.system-common-log-dir]/[iib.system-node-label].[iib-system-server-label].exceptionLog.txt' # The location in which the rotating exception log file should be written
                                        # This path must already exist and be writeable by the integration server user.
    #exceptionLogFileSize: 25           # The maximum size in MB of a single file that the exception log can use.
    #exceptionLogFileCount: 4           # The maximum number of files that the exception log can rotate through.
    #includeFlowThreadReporter: false   # Toggles whether exception in the exception log include a flow stack and history from the flow thread reporter
    #showNestedExceptionDetails: false  # Toggles whether nested exceptions are shown by default in the exception log

  GroupDirector:
    #managerType: default               # Controls which implementation of in memory aggregation should be used. Valid values are: default
    #timeoutThreads: 1                  # Sets the number of threads which will process timed-out groups per set of group nodes
    #timeoutInterval: 100               # Sets the duration in milliseconds between the end of one timeout processing run and the start of the next
    #unknownThreads: 1                  # Sets the number of threads which will process unknown messages per set of group nodes
    #unknownInterval: 100               # Sets the duration in milliseconds between the end of one unknown message processing run and the start of the next
    #maximumNumberOfGroups: -1          # Limits the total number of groups that can be active at any one time. -1 means no limit.
    replyFormat: mixed-content          # Controls which method should be used to store messages that are received by a GroupGather node before being output
                                        # in a GroupComplete node. Valid values are:
                                        #     * basic - Serialize the entire message tree based on the values in the Properties parser. This was the default
                                        #               behaviour before 11.0.0.6
                                        #     * mixed-content - Serialize each first level child of the message root individually, using the subtree's own parser
                                        #                       to decide what CCSID and encoding to use. This requires that each individual subtree be valid
                                        #                       according to the rules of that parser. Subtrees that do not serialize will not be stored.
                                        #     * toolkit - Serialize the message using the same method used by the toolkit for messages in the flow exerciser.
                                        #                 This is capable of representing arbitrary message trees accurately but is slower.
  MRM:
    #messageSetLoadStrategy: onServerStart # Controls when MRM message sets are loaded into the MRM cache. Valid values are:
                                           #  * onServerStart  - The default where all MRM message sets are loaded into the MRM cache when the server is started.
                                           #  * onFirstMessage - A message set is loaded into the MRM cache when it is first referenced by message processing.

  FileNodes: 
    #allowReadOnlyInputFiles: false # When set to true this will allow files to be processed by the FileInput node if the file has filesystem permissions set to  
                                    # read-only for the ACE user. The parent directory must still be writeable.                                                    
                                                              
    #disableLocking: false  # When set to true prevents the File Nodes from obtaining operating system level locks on files before processing them. 
                            # This can be helpful to allow files to be processed on filesystems that do not support POSIX file locking semantics. 
                            # Note that file locking is used to prevent multiple Integration Servers or Integration Nodes from reading the same input file 
                            # when processing from the same directory. Therefore if disableLocking is set to true the user must ensure that only a
                            # single Integration Server reads from the specified input directory.                                                    
                                                              
                                                              
    #avoidWriteLockCheck: false # When set to true bypasses the write lock check on an input file before it is processed by the FileInput node. For network     
                                # filesystems that cache file attributes between calls this can prevent the accumulation of zero length input file in the input
                                # directory.                                                    
                                                              
    #maxDirectoryDepth: 50 # The maximum depth of directory structure a FileInput or FileExists Node will traverse below the input directory. 
                                                              
    #rootDirectory: '' # Allows a base directory to be set such that relative paths set in the FileInput or FileExists Node's directory property will be constructed
                       # relative to this base path.      
                                                              
    #allowFileSystemRoot: false # When set to true will allow the FileInput or FileExists node to read and delete processed files from the root directory of the operating system.                         
                                                              
    #maxRecordLength: 104857600 # The maximum size of record that will be read by the FileInput or FileRead nodes. In the case where the Record Detection property is 
                                # set to "Whole File" this is the maximum length of file that may be processed.                                                                         


BusinessTransactionDefinitions:
  #BusinessTransactionDefinitionTemplate:
    #policy: '{PolicyProject}:BTDPolicy' # The fully qualified name of the BusinessTransactionDefinition Policy
    #store: 'BTMDataStore'           # The name of the DataStore this BusinessTransactionDefinition will use to propagate events.
    #enabled: true                   # Set to true to enable this BusinessTransactionDefinition.

# Record and Replay requires a default queue manager to be associated with the integration server.
RecordReplay:
  #recordReplayEnabled: true           # Set to true to enable all Record and Replay functionality. Default is true.
  Stores:
    # Copy and customize the StoreTemplate section for each Record and Replay store that you want to create.
    # Rename the section title 'StoreTemplate' to be the name of your Record and Replay store. This name must be unique.
    #StoreTemplate:
      #dataSource: ''                    # The ODBC data source name (DSN) that is used to connect to the database that stores the recorded data. This property is mandatory and has no default value.
      #schema: ''                        # The schema name that owns the database tables that are used for storing recorded data. This property has no default value. If no value is set, either the default database schema is used (if there is one), or no schema is used, depending on the database.
      #storeMode: 'all'                  # The mode for the store to operate in. Valid values are record, view, and all. Default is all.
      #queue: 'SYSTEM.BROKER.DC.RECORD'  # The name of the queue to which event messages will be published before being recorded to the database. The queue must exist.
                                         # Default is SYSTEM.BROKER.DC.RECORD. The queue SYSTEM.BROKER.DC.RECORD must be created manually if you use Record and Replay. The same queue can be specified for multiple Record and Replay stores.
                                         # Change the value of this property to distribute the data from multiple sources across multiple queues.
      #backoutQueue: 'SYSTEM.BROKER.DC.BACKOUT'  # The name of the backout queue used by the recorder. Messages that cannot be processed (for example, because the specified database does not exist) are sent to this queue.
                                                 # Default is SYSTEM.BROKER.DC.BACKOUT. The queue SYSTEM.BROKER.DC.BACKOUT must be created manually if you use Record and Replay. If a data capture source refers to this data capture store, and no backoutQueue has been specified, an error occurs. The same backoutQueue can be specified for multiple Record and Replay stores.
      #useCoordinatedTransaction: false  # Specifies whether recorder transactions are globally coordinated across IBM MQ and database resources. Default is false.
      #commitCount: 10                   # The number of input messages that are processed on a recorder thread before a sync point is taken. Default is 10.
      #threadPoolSize: 10                # The number of threads that are used by the recorder to process the monitoring topic subscriptions. Default is 10.
      #commitIntervalSecs: 5             # The time interval (in seconds) at which a commit is taken, if the commitCount property is greater than 1 but the number of messages processed has not reached the value of the commitCount property. Default is 5.
    # Like the StoreTemplate, copy, configure and rename the BTMDataStore section for each Record and Replay store you want to use to process Business Transaction Monitoring (BTM) Events.
    #BTMDataStore:
      #dataSource: ''
      #schema: ''
      #storeMode: 'all'
      #queue: 'SYSTEM.BROKER.DC.RECORD'
      #backoutQueue: 'SYSTEM.BROKER.DC.BACKOUT'
      #useCoordinatedTransaction: false
      #commitCount: 10  
      #threadPoolSize: 10
      #commitIntervalSecs: 5

  Sources:
    # Copy and customize the SourceTemplate section for each Record and Replay source that you want to create.
    # Rename the section title 'SourceTemplate' to be the name of your Record and Replay source. This name must be unique.
    # If you have set 'eventFormat: MonitoringEventV2' for monitoring events, the value of the topic property takes the form: $SYS/Broker/integrationNodeName/Monitoring/integrationServer/application/library/msgFlow ,where integrationNodeName, integrationServer, application, library, and msgFlow represent the names of your integration node, integration server, application, library, and message flow. The library name is optional and will be required only if the message flow is inside a library.
    # If you have set 'eventFormat: WMB' for monitoring events, the value of the topic property takes the form: $SYS/Broker/integrationNodeName/Monitoring/integrationServer/msgFlow, where integrationNodeName, integrationServer, and msgFlow represent the names of your integration node, integration server, and message flow.
    # You can use wildcards in the topic property; for more information about using wildcards in topic strings, see "Special characters in topics" topic in the Knowledge Center.
    # A durable subscription is created for each source and is created with a subid of [nodename]:[servernme]:[sourcename]. If multiple independent integration servers share the same queue manager, you must ensure that there is no clash in node, server, and source name.
    # If you delete a source, you must manually delete the durable subscription for that source to avoid messages being published to the Record and Replay store's queue.
    #SourceTemplate:
      #topic: '$SYS/Broker/[nodename]/Monitoring/[servername]/[applicationname]/[flowname]'  # Sets the monitoring event topic string that is used when record and replay subscribes to monitoring events, see above.
      #store: 'StoreTemplate' # The Record and Replay store that is used to configure record and replay for the message flows specified in the topic property. Multiple instances of Record and Replay source can refer to one instance of a Record and Replay store.

  Destinations:
    # Copy and customize the MQDestinationTemplate section for each Record and Replay destination that you want to create.
    # Rename the section title 'MQDestinationTemplate' to be the name of your Record and Replay destination. This name must be unique.
    # For destinations of type WMQDestination, the value of the property takes the form: wmq:/msg/queue/queueName@queueManagerName, where queueName identifies the destination queue and queueManagerName identifies the queue manager that owns the queue. The queue manager specified by this property must be local; data cannot be replayed to a queue that is on a remote queue manager.
    #MQDestinationTemplate:
      #endpointType: 'WMQDestination'             # The type of the target destination to which messages will be replayed. The default is WMQDestination, which is the only valid value.
      #endpoint: 'wmq:/msg/queue/[QUEUE]@[QMGR]'  # The destination to which you want to replay data. This property is mandatory. The default value is wmq:/msg/queue/[QUEUE]@[QMGR]. You must replace [QUEUE] and [QMGR] with the names of your queue and queue manager.

ELKConnections:
  # Description for ELK Connections.
  # elkConnection1:
  #   elkProtocol: 'beats'                       # Logstash input protocol. Valid values are: 'beats', 'beatsTls', 'http', or 'https'.
  #   hostname: 'myhost.domain.com'              # Hostname for the elkProtocol endpoint.
  #   port: 0                                    # Port for the elkProtocol endpoint.
  #   uploadIntervalMilliSecs: 60000             # Interval between uploading cached data, set in milliseconds.
  #   elkCredential: ''                          # Set an 'elk' credential alias name to enable basic authentication, if it is required by the Logstash input protocol.
  #   keystoreFile: '/path/to/keystore.jks'      # Set the path to the keystore to be used, if it is required by the Logstash input protocol.
  #   keystorePass: 'P4s5w0rd'                   # Set the password, or 'keystore' credential alias to the password, of the keystore.
  #   keyAlias: ''                               # Set the alias name of the private key, if mutual authentication is required by the Logstash input protocol.
  #   keyPass: ''                                # Set the password, or 'keystorekey' credential alias to the password, for accessing the private mutual authentication key.
  #   truststoreFile: '/path/tp/truststore.jks'  # Set the path to the truststore to be used, if it is required by the Logstash input protocol.
  #   truststorePass: 'P4s5w0rd'                 # Set the password, or 'truststore' credential alias to the password, for accessing the truststore.

EnvironmentVariables:
  #ENV_VAR_ONE: 'env_var_one_value'

